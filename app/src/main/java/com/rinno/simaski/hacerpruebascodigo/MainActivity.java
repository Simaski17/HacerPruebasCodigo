package com.rinno.simaski.hacerpruebascodigo;


import android.graphics.Point;
import android.support.v7.app.AppCompatActivity;
import android.os.Bundle;
import android.util.Log;
import android.view.Display;
import android.widget.ImageView;

public class MainActivity extends AppCompatActivity {

    //custom drawing view
    private DrawingView drawView;
    private DrawingPointView drawViewPoint;

    int[][] m = new int[26][26];
    int[][] path = new int[26][26];
    int[][] shortpath;
    public String partes;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main);


        //get drawing view
        drawView = (DrawingView) findViewById(R.id.drawing);
        drawViewPoint = (DrawingPointView) findViewById(R.id.drawingPoint);

        //m= new int[][]{{0, 3, 5, 2, 10000, 10000, 10000, 10}, {3, 0, 5, 8, 4, 10000, 6, 6}, {5, 5, 0, 10000, 1, 7, 9, 10000}, {2, 6, 10000, 0, 8, 10000, 10000, 14}, {10000, 4, 1, 8, 0, 10000, 15, 10000}, {10000, 10000, 7, 10000, 10000, 0, 10000, 9}, {10000, 6, 9, 10000, 15, 10000, 0, 3}, {10, 6, 10000, 14, 10000, 9, 3, 0}};
        m = new int[][] {{0,27,23,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000},
                {27,0,13,38,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000},
                {23,13,0,10000,26,25,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000},
                {10000,38,10000,0,24,10000,25,10000,10000,48,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000},
                {10000,10000,26,24,0,20,30,26,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000},
                {10000,10000,25,10000,20,0,10000,25,42,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000},
                {10000,10000,10000,25,30,10000,0,31,10000,29,37,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000},
                {10000,10000,10000,10000,26,25,31,0,10000,10000,32,10000,34,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000},
                {10000,10000,10000,10000,10000,42,10000,10000,0,10000,10000,10000,22,37,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000},
                {10000,10000,10000,48,10000,10000,29,10000,10000,0,10000,10000,10000,10000,27,32,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000},
                {10000,10000,10000,10000,10000,10000,37,32,10000,10000,0,19,10000,10000,10000,20,27,10000,10000,10000,10000,10000,10000,10000,10000,10000},
                {10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,19,0,23,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000},
                {10000,10000,10000,10000,10000,10000,10000,34,22,10000,10000,23,0,38,10000,10000,39,10000,10000,10000,10000,10000,10000,10000,10000,10000},
                {10000,10000,10000,10000,10000,10000,10000,10000,37,10000,10000,10000,38,0,10000,10000,61,10000,10000,61,31,10000,10000,10000,10000,10000},
                {10000,10000,10000,10000,10000,10000,10000,10000,10000,27,10000,10000,10000,10000,0,20,10000,19,20,10000,10000,10000,10000,10000,10000,10000},
                {10000,10000,10000,10000,10000,10000,10000,10000,10000,32,20,10000,10000,10000,20,0,10000,10000,21,10000,10000,10000,10000,33,10000,10000},
                {10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,27,10000,39,61,10000,36,0,10000,10000,25,10000,10000,10000,40,10000,10000},
                {10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,19,10000,10000,0,10000,10000,10000,20,38,49,10000,10000},
                {10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,20,21,10000,10000,0,10000,10000,10000,10000,33,10000,10000},
                {10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,61,10000,10000,25,10000,10000,0,10000,10000,10000,35,29,10000},
                {10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,31,10000,10000,10000,10000,10000,10000,0,10000,10000,10000,34,10000},
                {10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,20,10000,10000,10000,0,40,10000,10000,10000},
                {10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,38,10000,10000,10000,40,0,23,10000,10000},
                {10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,48,40,49,33,35,10000,10000,23,0,57,57},
                {10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,29,34,10000,10000,57,0,38},
                {10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,10000,71,57,38,0}};


        Log.e("TAG","M: "+m.length);

        for (int i = 0; i < m.length; i++) {
            for (int j = 0; j < m.length; j++) {
                if (m[i][j] == 10000) {
                    path[i][j] = -1;
                } else {
                    path[i][j] = i;
                }
            }
        }

        for (int i = 0; i < m.length; i++) {
            path[i][i] = i;
        }

        shortpath = shortestpath(m, path);

        int start = 1;
        int end = 25;

        String myPath = end + "";

        while (path[start][end] != start) {
            myPath = path[start][end] + "->" + myPath;
            end = path[start][end];
        }

        Log.e("TAG","PATH: "+myPath);

        myPath = start + "->" + myPath;
        Log.e("TAG","ESTE ES EL CAMINO: "+myPath);

        partes = myPath;
        //parts =partes.split("->"); // escape .

        drawView.init(partes);
        drawViewPoint.init(partes);
        /*Intent i = new Intent(this, DrawLineActivity.class);
        i.putExtra("partes", partes);
        startActivity(i);*/
        Log.e("TAG", "PARTES PARTES : " + partes);

    }

    public static int[][] shortestpath(int[][] adj, int[][] path) {

        int n = adj.length;
        int[][] ans = new int[n][n];

        // Implementar el algoritmo en una matriz de copia de modo que la adyacencia no es
        //destruido.
        copy(ans, adj);

        // Calcular rutas sucesivamente a través de una mejor k vértices.
        for (int k = 0; k < n; k++) {

            // Es así que entre cada par de puntos posibles.
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {


                    if (ans[i][k] + ans[k][j] < ans[i][j]) {
                        ans[i][j] = ans[i][k] + ans[k][j];
                        path[i][j] = path[k][j];
                    }
                }
            }
        }

        // Devuelva la matriz camino más corto.
        return ans;
    }

    public static void copy(int[][] a, int[][] b) {

        for (int i = 0; i < a.length; i++) {
            for (int j = 0; j < a[0].length; j++) {
                a[i][j] = b[i][j];
            }
        }
    }



}



